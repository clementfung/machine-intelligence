package clldsystem.eval;

import common.db.DB;
import common.db.DBConfig;
import common.config.AppConfig;
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Generates the agreement table between two sets of results (can be either a ground
 * truth generated from a wikipedia, or results generated by some of our methods.
 * @author zilka
 */
public class AgreementTable {

	DB db;
	boolean doesntExist;
	int cntYY;
	int cntYN;
	int cntYD;
	int cntNY;
	int cntNN;
	int cntND;
	int cntDY;
	int cntDN;
	int cntDD;
	String truthTable1;
	String truthTable2;
	String pageTable1;
	String pageTable2;
	String conceptMappingTablePage = "";
	String conceptMappingTableLinksTo = "";
	String label1 = "";
	String label2 = "";

	public void setDb(DB db) {
		this.db = db;
	}

	public void setTruthTable1(String truthTable1) {
		this.truthTable1 = truthTable1;
	}

	public void setTruthTable2(String truthTable2) {
		this.truthTable2 = truthTable2;
	}

	public void setPageTable1(String pageTable1) {
		this.pageTable1 = pageTable1;
	}

	public void setPageTable2(String pageTable2) {
		this.pageTable2 = pageTable2;
	}

	public void setConceptMappingTablePage(String conceptMappingTable) {
		this.conceptMappingTablePage = conceptMappingTable;
	}

	public void setConceptMappingTableLinksTo(String conceptMappingTable) {
		this.conceptMappingTableLinksTo = conceptMappingTable;
	}

	public void setLabel1(String label1) {
		this.label1 = label1;
	}

	public void setLabel2(String label2) {
		this.label2 = label2;
	}

	String buildQuery(String tt1, String tt2, String cmPage, String cmLinksTo, boolean pageJoin) {
		// base
		String queryTruth2 =
			"SELECT result AS type, SUM(cnt) AS cnt "
			+ "FROM ("
			+ "SELECT t1.page_id, "
			+ "COUNT(distinct t1.page_id) AS cnt, "
			+ "((t2.page_id IS NOT NULL)";
		if (cmLinksTo.length() > 0) {
			queryTruth2 += " + 3*(t2.page_id IS NULL AND cm.page_id IS NULL)"
				+ " + 2*(t2.page_id IS NULL AND cm.page_id IS NOT NULL))";
		} else {
			queryTruth2 += " + 2 * (t2.page_id IS NULL))";
		}
		queryTruth2 += " AS RESULT "
			+ "FROM " + tt1 + " t1 ";

		// if there is a linksTo mapping table
		if (cmLinksTo.length() > 0) {
			queryTruth2 += "LEFT JOIN "
				+ conceptMappingTableLinksTo + " cm  "
				+ "ON ";

			if (pageJoin) {
				queryTruth2 += "cm.page_id";
			} else {
				queryTruth2 += "cm.concept_id";
			}

			queryTruth2 += " = t1.links_to ";
		}

		// if there is a pageId mapping table
		if (cmPage.length() > 0) {
			queryTruth2 += "LEFT JOIN "
				+ cmPage + " cm2 "
				+ "ON ";
			if (pageJoin) {
				queryTruth2 += "cm2.page_id";
			} else {
				queryTruth2 += "cm2.concept_id";
			}

			queryTruth2 += " = t1.page_id ";
		}

		// join with the second truth
		queryTruth2 += "LEFT JOIN "
			+ tt2 + " t2 "
			+ "ON ";
		// first on pageId
		if (cmPage.length() > 0) {
			if (pageJoin) {
				queryTruth2 += "cm2.concept_id ";
			} else {
				queryTruth2 += "cm2.page_id ";
			}

		} else {
			queryTruth2 += "t1.page_id";
		}

		// then on linksTo
		queryTruth2 +=
			"= t2.page_id AND ";
		if (cmLinksTo.length() > 0) {
			if (pageJoin) {
				queryTruth2 += "cm.concept_id ";
			} else {
				queryTruth2 += "cm.page_id ";
			}

		} else {
			queryTruth2 += "t1.links_to";
		}

		// tail of the query
		queryTruth2 +=
			"= t2.links_to "
			+ "GROUP BY t1.page_id, t1.links_to, t2.page_id, t2.links_to) x "
			+ "GROUP BY result";

		return queryTruth2;
	}

	void computeOld() {
		try {
			String queryTruth1 = buildQuery(truthTable1, truthTable2, conceptMappingTablePage, conceptMappingTableLinksTo, false);
			String queryTruth2 = buildQuery(truthTable2, truthTable1, conceptMappingTablePage, conceptMappingTableLinksTo, true);
			/*
			String queryTruth2 = "SELECT result AS type, SUM(cnt) AS cnt "
			+ "FROM (" + "SELECT t1.page_id, "
			+ "COUNT(distinct t1.page_id) AS cnt, "
			+ "((t2.page_id IS NOT NULL)"
			+ " + 3*(t2.page_id IS NULL AND cm.page_id IS NULL)"
			+ " + 2*(t2.page_id IS NULL AND cm.page_id IS NOT NULL)) AS RESULT "
			+ "FROM " + truthTable2 + " t1 ";

			if (conceptMappingTableLinksTo != null) {
			queryTruth2 += "LEFT JOIN "
			+ conceptMappingTableLinksTo + " cm  "
			+ "ON cm.page_id = t1.links_to ";
			}

			if (conceptMappingTablePage != null) {
			queryTruth2 += "LEFT JOIN "
			+ conceptMappingTablePage + " cm2 "
			+ "ON cm2.page_id = t1.page_id ";
			}

			queryTruth2 += "LEFT JOIN "
			+ truthTable1 + " t2 "
			+ "ON ";
			if (conceptMappingTablePage != null) {
			queryTruth2 += "cm2.concept_id ";
			} else {
			queryTruth2 += "t1.page_id";
			}

			queryTruth2 +=
			"= t2.page_id AND ";
			if (conceptMappingTableLinksTo != null) {
			queryTruth2 += "cm.concept_id ";
			} else {
			queryTruth2 += "t1.links_to";
			}
			queryTruth2 +=
			"= t2.links_to "
			+ "GROUP BY t1.page_id, t1.links_to, t2.page_id, t2.links_to) x "
			+ "GROUP BY result";

			String queryTruth1 = "SELECT result AS type, SUM(cnt) AS cnt "
			+ "FROM (" + "SELECT t1.page_id, "
			+ "COUNT(distinct t1.page_id) AS cnt, "
			+ "((t2.page_id IS NOT NULL)"
			+ " + 3*(t2.page_id IS NULL AND cm.page_id IS NULL)"
			+ " + 2*(t2.page_id IS NULL AND cm.page_id IS NOT NULL)) AS RESULT "
			+ "FROM " + truthTable1 + " t1 " + "LEFT JOIN "
			+ conceptMappingTable + " cm  "
			+ "ON cm.concept_id = t1.links_to "
			+ "LEFT JOIN " + conceptMappingTable + " cm2 "
			+ "ON cm2.concept_id = t1.page_id "
			+ "LEFT JOIN " + truthTable2 + " t2 "
			+ "ON cm2.page_id = t2.page_id AND cm.page_id = t2.links_to "
			+ "GROUP BY t1.page_id, t1.links_to, t2.page_id, t2.links_to) x "
			+ "GROUP BY result";
			// ---
			String queryYY = "SELECT SUM(result) AS result FROM ("
			+ "SELECT page_id, SUM(result) AS result FROM("
			+ "SELECT r.page_id, r.links_to, t.page_id IS NOT NULL AS result "
			+ "FROM " + truthTable1 + " r " + "INNER JOIN "
			+ conceptMappingTable
			+ " cm ON cm.concept_id = r.page_id "
			+ "INNER JOIN " + conceptMappingTable
			+ " cm2 ON cm2.concept_id = r.links_to "
			+ "LEFT JOIN " + truthTable2
			+ "  t ON t.page_id = cm.page_id AND t.links_to = cm2.page_id "
			+ "GROUP BY cm.page_id, cm2.page_id, r.page_id, r.links_to "
			+ ") x GROUP BY page_id" + ") t";
			String queryYN = "SELECT SUM(result) AS result FROM ("
			+ "SELECT page_id, SUM(result) AS result FROM("
			+ "SELECT r.page_id, r.links_to, (t.page_id IS NULL ) AS result "
			+ "FROM " + truthTable1 + " r " + "INNER JOIN "
			+ conceptMappingTable
			+ " cm ON cm.concept_id = r.page_id "
			+ "INNER JOIN " + conceptMappingTable
			+ " cm2 ON cm2.concept_id = r.links_to "
			+ "LEFT JOIN " + truthTable2
			+ "  t ON t.page_id = cm.page_id AND t.links_to = cm2.page_id "
			+ "GROUP BY r.page_id, r.links_to "
			+ ") x GROUP BY page_id" + ") t";
			String queryYD = "SELECT SUM(result) AS result FROM ("
			+ "SELECT page_id, SUM(result) AS result FROM("
			+ "SELECT r.page_id, r.links_to, cm2.page_id IS NULL AS result "
			+ "FROM " + truthTable1 + " r " + "LEFT JOIN "
			+ conceptMappingTable
			+ " cm2 ON cm2.concept_id = r.links_to "
			+ "GROUP BY r.page_id, r.links_to "
			+ ") x GROUP BY page_id" + ") t";
			System.out.println(queryYD);
			// ---
			String queryNY = "SELECT SUM(result) AS result FROM ("
			+ "SELECT page_id, SUM(result) AS result FROM("
			+ "SELECT r.page_id, r.links_to, (t.page_id IS NULL) AS result "
			+ "FROM " + truthTable2 + " r " + "INNER JOIN "
			+ conceptMappingTable
			+ " cm ON cm.page_id = r.page_id "
			+ "INNER JOIN " + conceptMappingTable
			+ " cm2 ON cm2.page_id = r.links_to "
			+ "LEFT JOIN " + truthTable1
			+ "  t ON t.page_id = cm.concept_id AND t.links_to = cm2.concept_id "
			+ "GROUP BY cm.page_id, cm2.page_id, r.page_id, r.links_to "
			+ ") x GROUP BY page_id" + ") t";
			String queryDY = "SELECT SUM(result) AS result FROM ("
			+ "SELECT page_id, SUM(result) AS result FROM ("
			+ "SELECT r.page_id, r.links_to, cm2.page_id IS NULL AS result "
			+ "FROM " + truthTable2 + " r " + "LEFT JOIN "
			+ conceptMappingTable
			+ " cm2 ON cm2.page_id = r.links_to "
			+ "GROUP BY cm2.page_id, r.page_id, r.links_to "
			+ ") x GROUP BY page_id" + ") t";
			 */

			String queryCollectionSize = "SELECT SUM(page_cnt) AS result "
				+ "FROM ("
				+ "SELECT count(page_id) AS page_cnt " + "FROM "
				+ pageTable1 + " p "
				+ " WHERE  p.page_is_redirect = 0 AND p.page_namespace = 0"
				+ " UNION "
				+ "SELECT count(page_id) AS page_cnt " + "FROM "
				+ pageTable2 + " p "
				+ " WHERE  p.page_is_redirect = 0 AND p.page_namespace = 0"
				+ " UNION "
				+ "SELECT count(cm.page_id)*(-1) AS page_cnt "
				+ "FROM " + pageTable2 + " p     "
				+ "LEFT JOIN " + conceptMappingTablePage
				+ " cm ON cm.page_id = p.page_id "
				+ "WHERE cm.page_id IS NOT NULL" + ") t";
			String queryTruthSize = "SELECT SUM(page_cnt) AS result "
				+ "FROM ("
				+ "SELECT count(page_id) AS page_cnt " + "FROM "
				+ truthTable1 + " UNION "
				+ "SELECT count(page_id) AS page_cnt " + "FROM "
				+ truthTable2 + " UNION "
				+ "SELECT count(cm.page_id)*(-1) AS page_cnt "
				+ "FROM " + truthTable2 + " p     "
				+ "LEFT JOIN " + conceptMappingTablePage
				+ " cm ON cm.page_id = p.page_id "
				+ "WHERE cm.page_id IS NOT NULL" + ") t";
			String queryNNold = "SELECT ((" + queryCollectionSize
				+ ") - (" + queryTruthSize + ")) AS result";

			String queryNN = "SELECT COUNT(*)*(SELECT COUNT(DISTINCT page_id) FROM "
				+ truthTable1
				+ ") AS result FROM (SELECT pes.page_id FROM      "
				+ pageTable2 + " pes ";
			if (conceptMappingTablePage.length() > 0) {
				queryNN += "LEFT JOIN     "
					+ conceptMappingTablePage
					+ " cm ON cm.page_id = pes.page_id "
					+ "WHERE       "
					+ "cm.page_id IS NULL ";
			}
			queryNN += "UNION	"
				+ "SELECT page_id*-1 "
				+ "FROM     "
				+ pageTable1 + " pen	"
				+ "WHERE pen.page_namespace = 0 AND pen.page_is_redirect = 0"
				+ ") t";

			String queryNDold = "SELECT count(*) AS result "
				+ "FROM "
				+ pageTable1 + " p     " + "LEFT JOIN "
				+ truthTable1 + " t ON t.page_id = p.page_id "
				+ "LEFT JOIN " + conceptMappingTablePage
				+ " cm ON cm.concept_id = p.page_id "
				+ "WHERE cm.page_id IS NULL AND t.page_id IS NULL AND p.page_is_redirect = 0 AND p.page_namespace = 0";

			String queryND = "SELECT count(*)*(SELECT COUNT(DISTINCT page_id) FROM "
				+ truthTable1 + ") AS result " + "FROM "
				+ pageTable1 + " p     "
				+ "LEFT JOIN " + conceptMappingTablePage
				+ " cm ON cm.concept_id = p.page_id "
				+ "WHERE cm.page_id IS NULL AND p.page_is_redirect = 0 AND p.page_namespace = 0";

			if (!(conceptMappingTablePage.length() > 0 && conceptMappingTableLinksTo.length()
				> 0)) {
				queryND = "SELECT 0 AS result";
			}

			String queryDNold = "SELECT count(*) AS result "
				+ "FROM "
				+ pageTable2 + " p     " + "LEFT JOIN "
				+ truthTable2 + " t ON t.page_id = p.page_id "
				+ "LEFT JOIN " + conceptMappingTablePage
				+ " cm ON cm.page_id = p.page_id "
				+ "WHERE cm.page_id IS NULL AND t.page_id IS NULL AND p.page_is_redirect = 0 AND p.page_namespace = 0";

			String queryDN = "SELECT count(*)*(SELECT COUNT(DISTINCT page_id) FROM "
				+ truthTable2 + ") AS result " + "FROM "
				+ pageTable2 + " p     "
				+ "LEFT JOIN " + conceptMappingTablePage
				+ " cm ON cm.page_id = p.page_id "
				+ "WHERE cm.page_id IS NULL AND p.page_is_redirect = 0 AND p.page_namespace = 0";
			if (!(conceptMappingTablePage.length() > 0 && conceptMappingTableLinksTo.length()
				> 0)) {
				queryDN = "SELECT 0 AS result";
			}

			String queryDD = "SELECT 0 AS result";

			int[][] table = new int[3][3];

			PreparedStatement ps;
			ResultSet res;
			int sum;

			// first
			ps = db.getConnection().prepareStatement(queryTruth1);
			//System.out.println(queryTruth1);
			sum = 0;
			res = ps.executeQuery();
			while (res.next()) {
				int cnt = res.getInt("cnt");
				int type = res.getInt("type");
				table[type - 1][0] = cnt;
			}

			ps = db.getConnection().prepareStatement(queryTruth2);
			sum = 0;
			res = ps.executeQuery();
			while (res.next()) {
				int cnt = res.getInt("cnt");
				int type = res.getInt("type");
				table[0][type - 1] = cnt;
			}

			String[] queries = new String[]{queryNN, queryND, queryDN, queryDD};
			Integer[] positions = new Integer[]{4, 5, 7, 8};
			int i = 0;
			for (String query : queries) {
				try {
					ps = db.getConnection().prepareStatement(query);
					res = ps.executeQuery();
					if (res.next()) {
						int cnt = res.getInt("result");
						int pos = positions[i];
						table[pos % 3][pos / 3] = cnt;
					}

				} catch (SQLException ex) {
					System.err.println("ERR: " + i);
					System.err.println(query);
					Logger.getLogger(AgreementTable.class.getName()).log(Level.SEVERE, null, ex);
				}
				i++;
			}
			// subtract from NN
			table[1][1] -= table[0][0] + table[0][1] + table[1][0];
			table[2][1] -= table[2][0];
			table[1][2] -= table[0][2];

			printTable(table);
		} catch (SQLException ex) {
			Logger.getLogger(AgreementTable.class.getName()).log(Level.SEVERE, null, ex);
		}



	}

	void printTable(int[][] table) {
		String[] labels = new String[]{"Y", "N", "NE"};
		System.out.printf("\t%s(%s)\t%s(%s)\t%s(%s)\n", labels[0], label1, labels[1], label1, labels[2], label1);
		int rowCntr = 0;
		for (int[] row : table) {
			System.out.printf("%s(%s):\t", labels[rowCntr], label2);
			for (int i : row) {
				System.out.printf("%d\t", i);
			}
			System.out.printf("\n");
			rowCntr++;
		}
	}

	void prepareCorrelationTable(String tableName, boolean temporary) throws IOException, SQLException {
		db.executeUpdate("DROP TABLE IF EXISTS " + tableName);

		Configuration cfg = new Configuration();
		cfg.setDirectoryForTemplateLoading(new File("templates/"));

		Template templ = cfg.getTemplate("create_corr.sql");

		Map out = new HashMap();
		out.put("dest_table", tableName);
		out.put("truth_table1", truthTable1);
		out.put("truth_table2", truthTable2);
		out.put("temporary", temporary);
		try {
			StringWriter strOut = new StringWriter();
			templ.process(out, strOut);
			String query = strOut.getBuffer().toString();
			db.executeUpdate("SET @rownum := 0, @prev = NULL");
			db.executeUpdate(query);
			db.executeUpdate("ALTER TABLE " + tableName + " ADD INDEX ndx1 (rank ASC)");
			db.executeUpdate("ALTER TABLE " + tableName + " ADD INDEX ndx2 (status ASC)");
			db.executeUpdate("ALTER TABLE " + tableName + " ADD INDEX ndx3 (page_id ASC)");
			db.executeUpdate("ALTER TABLE " + tableName + " ADD INDEX ndx4 (links_to ASC)");
		} catch (TemplateException ex) {
			Logger.getLogger(AgreementTable.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void compute() {
		try {
			prepareCorrelationTable("corr_" + label1 + label2, false);
		} catch (IOException ex) {
			Logger.getLogger(AgreementTable.class.getName()).log(Level.SEVERE, null, ex);
		} catch (SQLException ex) {
			Logger.getLogger(AgreementTable.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public static void main(String[] args) throws SQLException, ClassNotFoundException {
		AppConfig cfg = AppConfig.getInstance();
		cfg.setSection("AgreementTable");

		DBConfig dbc = new DBConfig();
		dbc.setConnectionFromDrupalUrl(cfg.getSString("db"));

		DB db = new DB(dbc);

		AgreementTable at = new AgreementTable();
		at.setDb(db);
		at.setPageTable1(cfg.getSString("pageTable1"));
		at.setPageTable2(cfg.getSString("pageTable2"));
		at.setConceptMappingTablePage(cfg.getSString("conceptMappingTablePage"));
		at.setConceptMappingTableLinksTo(cfg.getSString("conceptMappingTableLinksTo"));
		at.setTruthTable1(cfg.getSString("truthTable1"));
		at.setTruthTable2(cfg.getSString("truthTable2"));
		at.setLabel1(cfg.getSString("label1"));
		at.setLabel2(cfg.getSString("label2"));

		at.compute();
	}
}
