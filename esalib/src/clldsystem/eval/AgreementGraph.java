package clldsystem.eval;

import common.db.DB;
import common.db.DBConfig;
import common.config.AppConfig;
import gnuplot.GNUPlot;
import gnuplot.GNUPlotData;
import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * Used to generate the graph of agreement between the ground truth and the results
 * produced by our methods. X-axis: number of links considered, Y-axis: agreement
 * @author zilka
 */
public class AgreementGraph {

	DB db;
	DB dbResMod;
	DB dbCorr;
	DB dbRes;
	String truthTable;
	String methodTable;
	String conceptMappingTable;
	String resFolder;
	String corrTable;
	String resModTable;

	public void setConceptMappingTable(String conceptMappingTable) {
		this.conceptMappingTable = conceptMappingTable;
	}

	public void setDb(DB db) {
		this.db = db;
	}

	public void setDbCorr(DB dbCorr) {
		this.dbCorr = dbCorr;
	}

	public void setDbRes(DB dbRes) {
		this.dbRes = dbRes;
	}

	public void setDbResMod(DB dbResMod) {
		this.dbResMod = dbResMod;
	}

	public void setTruthTable(String truthTable) {
		this.truthTable = truthTable;
	}

	public void setMethodTable(String methodTable) {
		this.methodTable = methodTable;
	}

	public void setResFolder(String resFolder) {
		this.resFolder = resFolder;
	}

	public static void main(String[] args) throws IOException, SQLException, ClassNotFoundException {
		AppConfig cfg = AppConfig.getInstance();
		cfg.setSection("AgreementGraph");

		DBConfig dbc = new DBConfig();
		dbc.setConnectionFromDrupalUrl(cfg.getSString("db"));

		DBConfig dbcRes = new DBConfig();
		dbcRes.setConnectionFromDrupalUrl(cfg.getSString("resDb"));

		DBConfig dbcCorr = new DBConfig();
		dbcCorr.setConnectionFromDrupalUrl(cfg.getSString("corrDb"));

		DBConfig dbcResMod = new DBConfig();
		dbcResMod.setConnectionFromDrupalUrl(cfg.getSString("resModDb"));

		DB db = new DB(dbc);
		DB dbRes = new DB(dbcRes);
		DB dbCorr = new DB(dbcCorr);
		DB dbResMod = new DB(dbcResMod);

		AgreementGraph ag = new AgreementGraph();
		ag.setDb(db);
		ag.setDbCorr(dbCorr);
		ag.setDbRes(dbRes);
		ag.setDbResMod(dbResMod);
		ag.setTruthTable(cfg.getSString("truthTable"));
		ag.setConceptMappingTable(cfg.getSString("conceptMappingTable"));
		ag.setResFolder(cfg.getSString("resFolder"));
		List<String> tableNames = cfg.getSList("tableName");
		for (String t : tableNames) {
			ag.setMethodTable(t);

			ag.generateAgreementTable();
			ag.generateAgreementGraph();
		}


	}

	/**
	 * Generates auxiliary table for agreement table computation. Just maps
	 * the source page id's to the concept id's.
	 * @return
	 * @throws SQLException 
	 */
	private String generateResModTable() throws SQLException {
		dbResMod.executeUpdate("DROP TABLE IF EXISTS m_" + methodTable);
		PreparedStatement psTruth = dbResMod.getConnection().prepareStatement(
			"CREATE TABLE m_" + methodTable + " AS "
			+ "SELECT cm.concept_id AS page_id, mt.links_to, '"
			+ methodTable + "' AS tag "
			+ "FROM " + dbRes.getConnection().getCatalog() + "."
			+ methodTable + " mt "
			+ "LEFT JOIN " + conceptMappingTable
			+ " cm ON mt.page_id = cm.page_id "
			+ "WHERE cm.page_id IS NOT NULL");

		psTruth.executeUpdate();

		dbResMod.executeUpdate("ALTER TABLE m_" + methodTable
			+ " ADD INDEX ndx1 (page_id ASC)");
		dbResMod.executeUpdate("ALTER TABLE m_" + methodTable
			+ " ADD INDEX ndx2 (links_to ASC)");

		return "m_" + methodTable;
	}

	/**
	 * Prepares the agreement table for the graph generation.
	 * @throws IOException
	 * @throws SQLException 
	 */
	private void generateAgreementTable() throws IOException, SQLException {
		resModTable = generateResModTable();

		AgreementTable at = new AgreementTable();
		at.setDb(dbRes);
		at.setTruthTable1(truthTable);
		at.setTruthTable2(dbResMod.getConnection().getCatalog() + "."
			+ resModTable);
		at.setLabel1("en");
		at.setLabel2(methodTable);

		corrTable = "corr_" + methodTable;
		at.prepareCorrelationTable(dbCorr.getConnection().getCatalog()
			+ ".corr_" + methodTable, true);
	}

	/**
	 * Draws the agreement graph based on the agreement table generated by generateAgreementTable.
	 * @throws SQLException
	 * @throws IOException 
	 */
	private void generateAgreementGraph() throws SQLException, IOException {
		ResultSet res;
		GNUPlotData d = new GNUPlotData();
		PreparedStatement ps = dbCorr.getConnection().prepareStatement(
			"SELECT sum(status)/count(*) AS agreement "
			+ "FROM " + corrTable + " r "
			+ "LEFT JOIN (SELECT page_id, count(*) as total FROM "
			+ corrTable
			+ " GROUP BY page_id) cnts ON r.page_id = cnts.page_id "
			+ "WHERE rank / total < ?");
		for (int i = 1; i <= 100; i += 1) {
			ps.setFloat(1, (float) (i / 100.0));
			res = ps.executeQuery();
			if (res.next()) {
				d.addData(i, res.getFloat("agreement"));
				System.out.println(">> " + i);
			} else {
				System.out.println(">> ! " + i);
			}
		}

		GNUPlot gp = new GNUPlot();
		gp.setPlotStyle(gp.PLOT_LINES);
		//gp.setYRange((float)0.0, (float)0.2);
		gp.plot(d, new File(resFolder, methodTable + ".png").getAbsolutePath());
	}
}
